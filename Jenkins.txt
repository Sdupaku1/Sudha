Source:https://www.edureka.co/blog/what-is-jenkins/

Log file will be placed in /var/log/jenkins/jenkins.log. Check this file if you are troubleshooting Jenkins.



/var/lib/jenkins --- default home dir for jenkins installation

cat /etc/sysconfig/jenkins ---- config file for Jenkins



--------->Jenkins Architecture:(Jenkins Distributed Architecture)

Jenkins uses a Master-Slave architecture to manage distributed builds. In this architecture, Master and Slave communicate through TCP/IP protocol.

Each builds requires a different testing environment which is not possible in a single Jenkins server. In order to perform testing in different environments Jenkins uses various Slaves.

If larger and heavier projects get built on a regular basis then a single Jenkins server cannot simply handle the entire load.

---->Jenkins Master

Your main Jenkins server is the Master. The Master’s job is to handle:

Scheduling build jobs.
Dispatching builds to the slaves for the actual execution.
Monitor the slaves (possibly taking them online and offline as required).
Recording and presenting the build results.
A Master instance of Jenkins can also execute build jobs directly.

------>Jenkins Slave

An agent is a computer that is set up to offload build projects from the master and once setup this distribution of tasks is fairly automatic. The exact delegation behavior depends on the configuration of each project; 
some projects may choose to "stick" to a particular machine for a build, while others may choose to roam freely between agents

A Slave is a Java executable that runs on a remote machine. Following are the characteristics of Jenkins Slaves:

It hears requests from the Jenkins Master instance.
Slaves can run on a variety of operating systems.
The job of a Slave is to do as they are told to, which involves executing build jobs dispatched by the Master.
You can configure a project to always run on a particular Slave machine, or a particular type of Slave machine, or simply let Jenkins pick the next available Slave.


---------->Creating slaves in Jenkins:

Below are the fields encountered while configuring the slave:

-----># of executors:An executor is a process that runs a build/job.
You are able to run one job at a time if you have one executor. If you have two executors, you are able to run two jobs in parallel and so forth

----->Remote root directory: An agent needs to have a directory dedicated to Jenkins. Specify the path to this directory on the agent such as /var/jenkins/node1. This should be a path local to the agent machine. 

/var/lib/jenkins. This is the directory on the slave that Jenkins will use for it's workspace

------>Labels:Labels (or tags) are used to group multiple agents into one logical group.

For example, if you have multiple Windows agents and you have a job that must run on Windows, then you could configure all your Windows agents to have the label windows, and then tie that job to this label. 

ex: unix

------>Launch method: Launch via ssh
Host: Give Private ip of node
select the credentials from the list, if adding newly, select add: then select SSH username with private key.
Host Key Verification Strategy: known hosts file verification strategy.
----->Host Key Verification Strategy : Method of how Jenkins verifies the SSH key presented by the remote host while connecting.
------>SSH clients store host keys of hosts they have ever connected to. These stored host keys are called known host keys, and the collection is often called known hosts


-------->Availability: keep the agent online as much as possible.

Commands to be run on master:

ssh-keyscan -H 172.31.31.218 >> /var/lib/jenkins/.ssh/known_hosts (run as root)(ssh-keyscan is a utility for gathering the public ssh host keys of a number of hosts. )
chown jenkins:jenkins /var/lib/jenkins/.ssh/known_hosts
chmod 700 /var/lib/jenkins/.ssh/known_hosts


to be run on slave:

create jenkins user with home dir

ssh-keygen -t rsa

cat id_rsa.pub >> authorized_keys

chmod 700 authorized_keys



------------>Continuous Integration Def:

(Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early.)

The CI process includes,

Merging of all the Developers code to the main line,
Triggering a build,
Compiling the code and making a build and ….lastly
Carrying out the unit test.

So, Continuous Integration is a process of merging all the developer’s code to a central location and validating each one of their merges with an automated build and test.

CI tools: Jenkins, Bamboo, BuildBot, Travis CI.


------->Jenkins is a open source automation tool used for Continuous Integration.It is written in Java with plugins for different CI stages like, Build, test, Deployment etc.

-------->Process before COntinuous integration:

Group of Developers will make changes in the source code present in source code repo like GIT or SVN. once the code is completed, it will be built usig tools like Ant and Maven.

After that, the built application is deployed onto test servers for testing.If there are any bugs, in the code, developers are notified through feed back loops.

If there are no bugs, application will be released onto production servers.


------->Problems for developers Faced with this process:

Developers have to wait for long time to get the feed back for developed applications.

They need to go through the entire source code of software to fix the bugs

-------->Continuous Integration to rescue:

In CI, every commit made to source code repo will be used to build, test and deploy the application, if there is any bug found in the testing in this process, developer will notice the commit that caused this bug.

This way, bug fixing has become lot more easier.And the frequency of software releases has become much more easier.



------------------>Installing Jenkins in Windows:


----->to download jenkins war file, got to http://jenkins.io/

----->Select windows in LTS section

----->after download, open cmd and go to war file location and then type java -jar jenkins.war --httpPort=8080

----->AFter that http://localhost:8080

------->enter admin password and install default plugins

-------------------->Create a Jenkins shell script job

Jenkins can run any shell script and report on the success or failure depending on whether the script exits with 0, for success, or non-zero, for failure.

----->On the Jenkins front page, click New Item.

------>Enter a name in the Item name field e.g. Shell job. Note that Jenkins uses the terms "project" and "job" interchangeably.

------->Select Freestyle project and click OK

------>On the configuration page, under the Advanced Project Options heading, click Advanced...

------->Select Use custom workspace.

------->Enter the directory of your shell script e.g. $HOME/build_and_test_examples/sh.(C:\Users\sdupakuntla\Desktop)

------>To execute unix commands in windows, we need to have cygwin installed and configured in Jenkins.
       For configuring it, select ManageJenkins --->ConfgiureSystem----> and mention 'C:\cygwin\bin\sh.exe' under shell executable field.

------->Scroll down the page to under the Build heading.

-------->Click Add build step and select Execute shell.
Enter:
./unixcomm.sh

-----> save the configuration and selct Build Now

----->If you get any error like this($'\r': command not found), while executing the command in cygiwn, run this dos2unix filename or 

Remove trailing \r character that causes this error: xsed -i 's/\r$//' filename


-------------->Installing Jenkins on RHel:

Installation
Add the Jenkins repository to the yum repos, and install Jenkins from here.

------>sudo wget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo
sudo rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key
sudo yum install jenkins

----->Installation of Java
Jenkins requires Java in order to run, yet certain distros don't include this by default. To install the Open Java Development Kit (OpenJDK) run the following:

sudo yum install java

---Start/Stop
sudo service jenkins start/stop/restart
sudo chkconfig jenkins on

The first time you use the dashboard at http://your-server-publicIPaddress:8080, you will be prompted to unlock Jenkins:





Interview qsns:

Q1. What is Jenkins?
My suggestion is to start this answer by giving a definition of Jenkins.

Jenkins is an open source automation tool written in Java with plugins built for Continuous Integration purpose. 
Jenkins is used to build and test your software projects continuously making it easier for developers to integrate changes to the project, and making it easier for users to obtain a fresh build.

First, a developer commits the code to the source code repository. Meanwhile, the Jenkins server checks the repository at regular intervals for changes.
Soon after a commit occurs, the Jenkins server detects the changes that have occurred in the source code repository. Jenkins will pull those changes and will start preparing a new build.
If the build fails, then the concerned team will be notified.
If built is successful, then Jenkins deploys the built in the test server.
After testing, Jenkins generates a feedback and then notifies the developers about the build and test results.
It will continue to check the  source code repository for changes made in the source code and the whole process keeps on repeating.


------>What are the benefits of using Jenkins?

A build will be created automically by pulling changes from source code repoistory.

we can do some post build actions like Junit testing, sending e-mail notification of job status or deploying the build artifacts(ear or .war) files to a container from POst build actions tab.

Integration of Jenkins with mail server to notify developers about build and test results

Build failures are cached.

Identification of bugs at early stage in development rather than in production.


---------->Pipelines in Jenkins:


Pipeline is workflow with group of jobs that are chained and integrated with each other sequentially.


In Devops stages:

Build ----> Deploy ----> Test----->release


There will be jobs configured for each of the above task like SampleBuildJob, SampleTestJob, SampleDeployJob

-->Configure the required jobs with necessary inputs

---> Create Pipeline, meaning establishing connection across the job. Go to first job and select post-build actions, select Build Other Projects and give next job details.Keep doing it until there is no further jobs.

--->Create Pipeline line view by clicking on new tab symbol then select the initial job and Apply. Finally CLick the Run

the Pipeline plugin makes pipelines scriptable and it is an incredibly powerful way to develop complex, multi-step DevOps pipelines.



------------>Declarative pipeline:In this post, we will cover all the directives available to develop your Declarative pipeline script, which will provide a clear picture of its functionality.

To create a basic Pipeline through the Jenkins classic UI:

If required, ensure you are logged in to Jenkins.

From the Jenkins home page (i.e. the Dashboard of the Jenkins classic UI), click New Item at the top left.


------>Declarative Pipelines Syntax

A valid Declarative pipeline must be defined with the "pipeline" sentence and include the next required sections:

    Agent
    Stages
    Stage
    Steps

Also, these are the available directives:

    Environment (Defined at stage or pipeline level)
    Input (Defined at stage level)
    Options (Defined at stage or pipeline level)
    Parallel
    Parameters
    Post
    Script
    Tools
    Triggers
    When


---->Agent

Jenkins provides the ability to perform distributed builds by delegating them to "agent" nodes.
 
Doing this allows you to execute several projects with only one instance of the Jenkins server, while the workload is distributed to its agents.

Agents should be labeled so they can be easily identified from each other. For example, nodes can be labeled by their platform (Linux, Windows, etc), by their versions or by their location, among others.

Specifying "agent any" means that Jenkins will run the job on any of the available nodes.

An example of its use could be:

pipeline {

agent any

...

}

---->Stages

This section allows generation of different stages on your pipeline that will be visualized as different segments when the job is run.

A sample pipeline including the stages sentence is provided:

pipeline {

agent any

stages {

...

}

}

----->Stage

At least one "stage" section must be defined on the "stages" section. It will contain the work that the pipeline will execute. 

Stages must be named accordingly since Jenkins will display each of them on its interface.Jenkins graphically splits pipeline execution based on the defined stages and displays their duration and whether it was successful or not.


The pipeline script for the previous image looks like the following:

pipeline {

agent any

stages {

stage ('build') {

...

}

stage ('test: integration-&-quality') {

...

}

stage ('test: functional') {

...

}

stage ('test: load-&-security') {

...

}

stage ('approval') {

...

}

stage ('deploy:prod') {

...

}

}

}


---->Steps

The last required section is "steps," which is defined into each "stage." At least one step must be defined in the "steps" section.

For Linux and MacOS, shell is supported. Here is an example:

steps {  

sh 'echo "A one line step"'

sh ''' 

echo "A multiline step"'

cd /tests/results

ls -lrt

'''

}

----->Environment

This directive can be both defined at stage or pipeline level, which will determine the scope of its definitions. When "environment" is used at the "pipeline" level, its definitions will be valid for all of the pipeline steps. If instead it is defined within a "stage," it will only be valid for the particular stage.

Sample uses of this directive:

At the "pipeline" level:

pipeline {

agent any

environment {

OUTPUT_PATH = './outputs/'

}

stages {

stage ('build') {

...

}

...

}

}

Here, "environment" is used at a "stage" level:

pipeline {

agent any

stages {

stage ('build') {

environment {

OUTPUT_PATH = './outputs/'

}

...

}

...

}

}

------->Parallel

Jenkins pipeline Stages can have other stages nested inside that will be executed in parallel. This is done by adding the "parallel" directive to your script.

-------->Install jenkins plugin offline

If jenkins server is not connected to internet, you can still download the available plugin.

Step 1: First download plugin from Jenkins plugin directory.
https://updates.jenkins-ci.org/download/plugins/

Step 2: Here you find your desired plugin and clicked on plugin name, now .hpi file will downloaded.

Step 3: Now open Jenkins and go to Manage Jenkins > Manage Plugins > Advance configuration(tab)

Step 4: Upload your-plugin.hpi file and save.

Step 5: Restart Jenkins.




























