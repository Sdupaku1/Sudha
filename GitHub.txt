DevOps is an approach to bridge the gap between software development and operations.

--->It’s a culture that you can adopt for continuous improvement. It will help you to bring your Developer Team and Operations Team on the same page, allowing them to work together with ease.

---->Devops aims to deliver software and services quicker.

---->DevOps can only work when SDLC can support it.Aim of DevOps is Complete the full SDLC as quickly as possible.

----->DevOps is more than just tools.Its a practice of Dev and Ops engineers participating together in the entire SDLC.

----->Tools that can help to achieve this quickly are:

   Cloud COmputing(Aws, google cloud, azure): Adopting cloud accelerates the DevOps as well

   Infra as Code(Chef, Puppet, Ansible, Salt STack)

   Build and Test using Continuous Integration( Jenkins)

   Containerization(Docker)

------> Version Control:

Version Control, aka revision control or source control is the managemnt of changes to documents, computer programs, large web sites and other collections of information.

It is a system that records changes to a file or set of files over time so that you can recall specific versions later.It consist of a central shared repository where teammates can commit changes to a file or set of file.


---->GIT is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git has major advantage over other VCS tools like SVN that it is a distributed version control system.”

Distributed VCS tools do not necessarily rely on a central server to store all the versions of a project’s files. Instead, every developer “clones” a copy of a repository and has the full history of the project on their own hard drive

---->If you need to clone your respository to local desktop, need to use git clone command

----->git clone https-site:

---> C:\Users\dupakunt>git clone https://github.com/SudhaDupa/demo-sudha.git
Cloning into 'demo-sudha'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.

------>create one more file and add to our clone repository:

-------->Tracking New Files
In order to begin tracking a new file, you use the command git add. To begin tracking the README file, you can run this:

$ git add README

git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit

---->Each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; In short, tracked files are files that Git knows about.

Untracked files are everything else?—?any files in your working directory that were not in your last snapshot and are not in your staging area.

echo 'test123' > test.txt  ----> entered the text and created file

---------->Index

Index holds a snapshot of the content of the working tree/directory, and this snapshot is taken as the contents for the next change to be made in the local repository.

git add test.txt ----- > add this file to git(This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit.)

git commit -m "added test.txt" ---- giving description or message to our latest commit(Here, commit corresponds to saving changes to your local repo)

----( we can above 2 statements this way: git commit -a -m "modified file test.txt twice")

------->Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. 
For that we will use the pull command.

-------->Pull
The git pull command fetches changes from a remote repository to a local repository. It merges upstream changes in your local repository, which is a common task in Git based collaborations.

------>Setting Origin

But first, you need to set your central repository as origin using the command:

git remote add origin <link of your central repository>

Now that my origin is set, let us extract files from the origin using pull. For that use the command:

---->git pull origin master

This command will copy all the files from the master branch of remote repository to your local repository.

Note: One can also try pulling files from a different branch using the following command:

git pull origin <branch-name>

Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.

git push ----- To push the commits to central repository server

--------------> branching in GIt:

Branch represents exactly a context in a project and helps you keep it separate from all other contexts.

Ex: Bugfixing, feature developing, add a hotfix

----------->A local branch is a branch that only you (the local user) can see. It exists only on your local machine.

------------>To create a branch:

git branch branchname

-------->To switch to newbranch:

git checkout branchname

-------->To notice which branch you are in

------------>git branch

C:\Users\dupakunt\demo-sudha>git branch
* branch1
  master

-------------->pushing your commits to remote repository from a branch

---->Use git push to push commits made on your local branch to a remote repository.

The git push command takes two arguments:

A remote name, for example, origin
A branch name, for example, master
For example:

git push  <REMOTENAME> <BRANCHNAME> 
As an example, you usually run git push origin master to push your local changes to your online repository.


C:\Users\dupakunt\demo-sudha>git push origin branch1
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 347 bytes | 173.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
 * [new branch]      branch1 -> branch1

C:\Users\dupakunt\demo-sudha>

---------->git checkout -b[ branch_name]

This command will create a new branch and checkout the new branch at the same time.

-------->Merging

Merging is the way to combine the work of different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.


--------------> to merge other branch with origin/master branch

checkout to the master branch

git merge branchname

C:\Users\dupakunt\demo-sudha>git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

C:\Users\dupakunt\demo-sudha>git branch
  branch1
* master

C:\Users\dupakunt\demo-sudha>git merge branch1
Updating 8688a6c..3531d64
Fast-forward
 feature.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 feature.txt

C:\Users\dupakunt\demo-sudha>git push  ---->pushing commits to central repo
fatal: TaskCanceledException encountered.
   A task was canceled.
Username for 'https://github.com': sudhasdn.453@gmail.com
Password for 'https://sudhasdn.453@gmail.com@github.com':
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
   8688a6c..3531d64  master -> master

--------------------> To rename a branch

git push <origin/reponame> <branch>:<newbranch>

C:\Users\dupakunt\demo-sudha>git push origin branch1:firstbranch
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
 * [new branch]      branch1 -> firstbranch


------------------>To delete a remote branch:(A remote branch is a branch on a remote location (in most cases origin). You can push the newly created local branch myNewBranch to origin. Now other users can track it.)

C:\Users\dupakunt\demo-sudha>git push -d origin branch1
fatal: TaskCanceledException encountered.
   A task was canceled.
Username for 'https://github.com': sudhasdn.453@gmail.com
Password for 'https://sudhasdn.453@gmail.com@github.com':
To https://github.com/SudhaDupa/demo-sudha.git
 - [deleted]         branch1

---------------->Deleting local branches in Git

git branch -d feature


-------------------------->you cannot delete a branch by being in that branch


One of the most useful features of any version control system is the ability to “undo” your mistakes. In Git, “undo” can mean many slightly different things.


----->Undo a “public” change
Scenario: You just ran git push, sending your changes to GitHub, now you realize there’s a problem with one of those commits. You’d like to undo that commit.

Undo with: git revert <SHA>

What’s happening: git revert will create a new commit that’s the opposite (or inverse) of the given SHA. If the old commit is “matter”, the new commit is “anti-matter”—anything removed in the old commit will be added in the new commit and anything added in the old commit will be removed in the new commit.

This is Git’s safest, most basic “undo” scenario, because it doesn’t alter history—so you can now git push the new “inverse” commit to undo your mistaken commit

------>Fix the last commit message
Scenario: You just typo’d the last commit message, you did git commit -m "Fxies bug #42" but before git push you realized that really should say “Fixes bug #42”.

Undo with: git commit --amend or git commit --amend -m "Fixes bug #42"

What’s happening: git commit --amend will update and replace the most recent commit with a new commit that combines any staged changes with the contents of the previous commit. With nothing currently staged, this just rewrites the previous commit message








