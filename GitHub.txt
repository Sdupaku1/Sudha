GIT terminology:

---->HEAD: the current commit your repo is on. Most of the time HEAD points to the latest commit in your current branch, but that doesn't have to be the case. HEAD really just means "what is my repo currently pointing at".

----->master: the name of the default branch that git creates for you when first creating a repo. In most cases, "master" means "the main branch.

----->origin: the default name that git gives to your main remote repo.

------>Downstream/Upstream: In terms of source control, you're "downstream" when you copy (clone, checkout, etc) from a repository. Information flowed "downstream" to you.

When you make changes, you usually want to send them back "upstream" so they make it into that repository so that everyone pulling from the same source is working with all the same changes.



DevOps is an approach to bridge the gap between software development and operations in an SDLC.Devops is a culture, it's a way of thinking that both DEV and OPS teams has to adopt in order to work faster to increase their poductivity.

--->It’s a culture that you can adopt for continuous improvement. It will help you to bring your Developer Team and Operations Team on the same page, allowing them to work together with ease.

---->Devops aims to deliver software and services quicker.

---->DevOps can only work when SDLC can support it.Aim of DevOps is Complete the full SDLC as quickly as possible.

----->DevOps is more than just tools.Its a practice of Dev and Ops engineers participating together in the entire SDLC.

----->Tools that can help to achieve this quickly are:

   Cloud COmputing(Aws, google cloud, azure): Adopting cloud accelerates the DevOps as well

   Infra as Code(Chef, Puppet, Ansible, Salt STack)

   Build and Test using Continuous Integration( Jenkins)

   Containerization(Docker)

------> Version Control:

Version Control, aka revision control or source control is the managemnt of changes to documents, computer programs, large web sites and other collections of information.

It is a system that records changes to a file or set of files over time so that you can recall specific versions later.It consist of a central shared repository where teammates can commit changes to a file or set of file.


---->GIT is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.

Git has major advantage over other VCS tools like SVN that it is a distributed version control system.”

Distributed VCS tools do not necessarily rely on a central server to store all the versions of a project’s files. Instead, every developer “clones” a copy of a repository and has the full history of the project on their own hard drive

---->If you need to clone your respository to local desktop, need to use git clone command

----->git clone https-site:

---> C:\Users\dupakunt>git clone https://github.com/SudhaDupa/demo-sudha.git
Cloning into 'demo-sudha'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.

------>create one more file and add to our clone repository:

-------->Tracking New Files
In order to begin tracking a new file, you use the command git add. To begin tracking the README file, you can run this:

$ git add README

git add . adds all modified and new (untracked) files in the current directory and all subdirectories to the staging area (a.k.a. the index), thus preparing them to be included in the next git commit

---->Each file in your working directory can be in one of two states: tracked or untracked. Tracked files are files that were in the last snapshot; In short, tracked files are files that Git knows about.

Untracked files are everything else?—?any files in your working directory that were not in your last snapshot and are not in your staging area.

echo 'test123' > test.txt  ----> entered the text and created file

---------->Index

Index holds a snapshot of the content of the working tree/directory, and this snapshot is taken as the contents for the next change to be made in the local repository.

git add test.txt ----- > add this file to git(This command updates the index using the current content found in the working tree and then prepares the content in the staging area for the next commit.)

git commit -m "added test.txt" ---- giving description or message to our latest commit(Here, commit corresponds to saving changes to your local repo)

----( we can above 2 statements this way: git commit -a -m "modified file test.txt twice")

------->Note that before you affect changes to the central repository you should always pull changes from the central repository to your local repository to get updated with the work of all the collaborators that have been contributing in the central repository. 
For that we will use the pull command.

-------->Pull
The git pull command fetches changes from a remote repository to a local repository. It merges upstream changes in your local repository, which is a common task in Git based collaborations.

------>Setting Origin

But first, you need to set your central repository as origin using the command:

git remote add origin <link of your central repository>

Now that my origin is set, let us extract files from the origin using pull. For that use the command:

---->git pull origin master

This command will copy all the files from the master branch of remote repository to your local repository.

Note: One can also try pulling files from a different branch using the following command:

git pull origin <branch-name>

Your local Git repository is now updated with all the recent changes. It is time you make changes in the central repository by using the push command.

git push ----- To push the commits to central repository server

--------------> branching in GIt:

Branch represents exactly a context in a project and helps you keep it separate from all other contexts.

Ex: Bugfixing, feature developing, add a hotfix

----------->A local branch is a branch that only you (the local user) can see. It exists only on your local machine.

----->A checkout is an operation that moves the HEAD ref pointer to a specified commit.

------------>To create a branch:

git branch branchname

-------->To switch to newbranch:

git checkout branchname

-------->To notice which branch you are in

------------>git branch

C:\Users\dupakunt\demo-sudha>git branch
* branch1
  master

-------------->pushing your commits to remote repository from a branch

---->Use git push to push commits made on your local branch to a remote repository.

The git push command takes two arguments:

A remote name, for example, origin
A branch name, for example, master
For example:

git push  <REMOTENAME> <BRANCHNAME> 
As an example, you usually run git push origin master to push your local changes to your online repository.


C:\Users\dupakunt\demo-sudha>git push origin branch1
Counting objects: 3, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 347 bytes | 173.00 KiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
 * [new branch]      branch1 -> branch1

C:\Users\dupakunt\demo-sudha>

checkout: The git checkout command is used to update the state of the repository to a specific point in the projects history. When passed with a branch name, it lets you switch between branches.

Internally, the above command does is move HEAD to a different branch and update the working directory to match.

You can also check out arbitrary commits by passing the commit reference instead of a branch.

---->git checkout HEAD~2

Above command will check out the grandparent of the current commit

---------->git checkout -b[ branch_name]

This command will create a new branch and checkout the new branch at the same time.

-------->Merging

Merging is the way to combine the work of different branches together. This will allow us to branch off, develop a new feature, and then combine it back in.


--------------> to merge other branch with origin/master branch

checkout to the master branch

git merge branchname

C:\Users\dupakunt\demo-sudha>git checkout master
Switched to branch 'master'
Your branch is up to date with 'origin/master'.

C:\Users\dupakunt\demo-sudha>git branch
  branch1
* master

C:\Users\dupakunt\demo-sudha>git merge branch1
Updating 8688a6c..3531d64
Fast-forward
 feature.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 feature.txt

C:\Users\dupakunt\demo-sudha>git push  ---->pushing commits to central repo
fatal: TaskCanceledException encountered.
   A task was canceled.
Username for 'https://github.com': sudhasdn.453@gmail.com
Password for 'https://sudhasdn.453@gmail.com@github.com':
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
   8688a6c..3531d64  master -> master

--------------------> To rename a branch

git push <origin/reponame> <branch>:<newbranch>

C:\Users\dupakunt\demo-sudha>git push origin branch1:firstbranch
Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/SudhaDupa/demo-sudha.git
 * [new branch]      branch1 -> firstbranch


------------------>To delete a remote branch:(A remote branch is a branch on a remote location (in most cases origin). You can push the newly created local branch myNewBranch to origin. Now other users can track it.)

C:\Users\dupakunt\demo-sudha>git push -d origin branch1
fatal: TaskCanceledException encountered.
   A task was canceled.
Username for 'https://github.com': sudhasdn.453@gmail.com
Password for 'https://sudhasdn.453@gmail.com@github.com':
To https://github.com/SudhaDupa/demo-sudha.git
 - [deleted]         branch1

---------------->Deleting local branches in Git

git branch -d feature


-------------------------->you cannot delete a branch by being in that branch


One of the most useful features of any version control system is the ability to “undo” your mistakes. In Git, “undo” can mean many slightly different things.



------->A revert is an operation that takes a specified commit and creates a new commit which inverses the specified commit. 


----->Undo a “public” change
Scenario: You just ran git push, sending your changes to GitHub, now you realize there’s a problem with one of those commits. You’d like to undo that commit.

Undo with: git revert <SHA>

What’s happening: git revert will create a new commit that’s the opposite (or inverse) of the given SHA. If the old commit is “matter”, the new commit is “anti-matter”—anything removed in the old commit will be added in the new commit and anything added in the old commit will be removed in the new commit.

This is Git’s safest, most basic “undo” scenario, because it doesn’t alter history—so you can now git push the new “inverse” commit to undo your mistaken commit

------>Fix the last commit message
Scenario: You just typo’d the last commit message, you did git commit -m "Fxies bug #42" but before git push you realized that really should say “Fixes bug #42”.

Undo with: git commit --amend or git commit --amend -m "Fixes bug #42"

What’s happening: git commit --amend will update and replace the most recent commit with a new commit that combines any staged changes with the contents of the previous commit. With nothing currently staged, this just rewrites the previous commit message


--------->To view the contents of old version of a particular file:

git show Revision:filename(path-to-file)

For example, to view the version of file test.txt from 1 commits ago, use:

$ git show HEAD~1:test.txt

C:\Users\sdupakuntla\Desktop\DevOps Related>git show HEAD~1:test.txt
Hi, am testing github. Trying to recover different versions of this file.

------->To get the commit values of old commits, 

By default, with no arguments, git log lists the commits made in that repository in reverse chronological order – that is, the most recent commits show up first 

One of the more helpful options is -p, which shows the difference introduced in each commit.

git log -p -2 will show the latest 2 commits made 


---------->Reverting commit
You can revert individual commits with:

git revert <commit_hash>
This will create a new commit which reverts the changes of the commit you specified. Note that it only reverts that specific commit, and not commits after that. 

After that push the changes to make changes visible in the remote repo.

-------->Reset commit:(https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting)

On the commit-level, resetting is a way to move the tip of a branch to a different commit. This can be used to remove commits from the current branch.

Example:

git checkout hotfix
git reset HEAD~2

The two commits that were on the end of hotfix are now dangling, or orphaned commits. This means they will be deleted the next time Git performs a garbage collection.

you can also get 'git reset' to alter the staged snapshot and/or the working directory by passing it one of the following flags:

----> --soft – The staged snapshot and working directory are not altered in any way.
----> --hard – The staged snapshot and the working directory are both updated to match the specified commit.

-------->git revert is the best tool for undoing shared public changes
--------->git reset is best used for undoing local private changes


--------->Commit History has to be linear. It enables faster debugging.

You have to use git rebase to attain that linear history.

At a high level, rebasing can be understood as “moving the base of a branch onto a different position/commit”.

To know if command hisory is linear or not, git rev-list --min-parents=2 --count A..G(A being first commit, G being last).

Another Solution is git log --oneline --min-parents=2 A..G

--------->git stash:

Often, when you’ve been working on part of your project, things are in a messy state and you want to switch branches for a bit to work on something else. 

The problem is, you don’t want to do a commit of half-done work just so you can get back to this point later. The answer to this issue is the git stash command.

Stashing takes the dirty state of your working directory — that is, your modified tracked files and staged changes and saves it on a stack of unfinished changes that you can reapply at any time.

Now you want to switch branches, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes. To push a new stash onto your stack, run 

git stash:

$ git stash
Saved working directory and index state \
  "WIP on master: 049d078 added the index file"
HEAD is now at 049d078 added the index file
(To restore them type "git stash apply")

To see which stashes you’ve stored, you can use git stash list:

git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log

You can reapply the one you just stashed by using the command shown in the help : git stash apply. 

$ git stash apply
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#
#      modified:   index.html
#      modified:   lib/simplegit.rb

----->If u run above command, the staged files/changes will not be re-applied. To apply them, use command: git stash apply --index.

The apply option only tries to apply the stashed work — you continue to have it on your stack. To remove it, you can run "git stash drop" with the name of the stash to remove:

$ git stash list
stash@{0}: WIP on master: 049d078 added the index file
stash@{1}: WIP on master: c264051 Revert "added file_size"
stash@{2}: WIP on master: 21d80a5 added number to log

$ git stash drop stash@{0}
Dropped stash@{0} (364e91f3f268f0900bc3ee613f9f733e82aaed43)



------------>https://gist.github.com/gregrickaby/70f10dfa9385c1d5cc49f99562ffb816  ------- git cheatsheet.





