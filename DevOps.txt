---->What is DevOps?

DevOps integrates developers and operations team to improve collaboration and productivity.

According to the DevOps culture, a single group of Engineers (developers, system admins, QA’s. Testers etc turned into DevOps Engineers) has end to end responsibility of the Application (Software) right from gathering the requirement to development, to testing, to infrastructure deployment, to application deployment and finally monitoring & gathering feedback from the end users, then again implementing the changes.

DevOps is a software development approach which involves Continuous Development, Continuous Testing, Continuous Integration, Continuous Deployment and Continuous Monitoring of the software throughout its development life cycle.


------>DevOps Lifecycle can be broadly broken down into the below DevOps Stages:
Continuous Development
Continuous Integration
Continuous Testing
Continuous Monitoring
Virtualization and Containerization
These stages are the building blocks to achieve DevOps as a whole.



--------->Continuous Development:
This is the stage in the DevOps life cycle where the Software is developed continuously. Unlike the Waterfall model, the software deliverables are broken down into multiple sprints of short development cycles, developed and then delivered in a very short time. This stage involves the Coding and Building phases and makes use of tools such as Git and SVN for maintaining the different versions of the code, and tools like Ant, Maven, Gradle for building/ packaging the code into an executable file that can be forwarded to the QAs for testing.

--------->Continuous Testing:
This is the stage where the developed software is continuously tested for bugs. For Continuous testing, automation testing tools like Selenium, TestNG, JUnit, etc are used. These tools allow the QAs to test multiple code-bases thoroughly in parallel to ensure that there are no flaws in the functionality. In this phase, use of Docker containers for simulating ‘test environment’ on the fly, is also a preferred choice. Once the code is tested, it is continuously integrated with the existing code.

-------->Continuous Integration:
This is the stage where the code supporting new functionality is integrated with the existing code. Since there is continuous development of software, the updated code needs to be integrated continuously as well as smoothly with the systems to reflect changes to the end users. The changed code, should also ensure that there are no errors in the runtime environment, allowing us to test the changes and check how it reacts with other changes.
Jenkins is a very popular tool used for Continuous Integration. Using Jenkins, one can pull the latest code revision from GIT repository and produce a build which can finally be deployed to test or production server. It can be set to trigger a new build automatically as soon as there is a change in the GIT repository or can be triggered manually on click of a button.

--------->Continuous Deployment:
It is the stage where the code is deployed to the production environment. Here we ensure that the code is correctly deployed on all the servers. If there is any addition of functionality or a new feature is introduced then one should be ready to welcome greater website traffic. So it is also the responsibility of the SysAdmin to scale up the servers to host more users.
Since the new code is deployed on a continuous basis, configuration management tools play an important role for executing tasks quickly and frequently. Puppet, Chef, SaltStack and Ansible are some popular tools that are used in this stage.
Containerization tools also play an important role in the deployment stage. Docker and Vagrant are the popular tools which help produce consistency across Development, Test, Staging and Production environments. Besides this, they also help in scaling-up and scaling-down of instances easily.

--------->Continuous Monitoring:
This is a very crucial stage in the DevOps life cycle which is aimed at improving the quality of the software by monitoring its performance. This practice involves the participation of the Operations team who will monitor the user activity for bugs / any improper behavior of the system. This can also be achieved by making use of dedicated monitoring tools which will continuously monitor the application performance and highlight issues.
Some popular tools used are Splunk, ELK Stack, Nagios, NewRelic and Sensu. These tools help you monitor the application and the servers closely to check the health of the system proactively. They can also improve productivity and increase the reliability of the systems, reducing IT support costs. Any major issues found could be reported to the development team so that it can be fixed in the continuous development phase.
These DevOps stages are carried out on loop continuously until the desired product quality is achieved. The diagram given below will show you which tools can be used in which stage of the DevOps life cycle.