-------->Puppet is a Configuration Management tool that is used for deploying, configuring and managing servers. 

It performs the following functions:

---->Defining distinct configurations for each and every host, and continuously checking and confirming whether the required configuration is in place and is not altered (if altered Puppet will revert back to the required configuration) on the host.
---->Dynamic scaling-up and scaling-down of machines.
---->Providing control over all your configured machines, so a centralized (master-server or repo-based) change gets propagated to all, automatically.
---->Puppet uses a Master Slave architecture in which the Master and Slave communicate through a secure encrypted channel with the help of SSL. 

Puppet uses pull configuration management, so does chef:

Master-SLave Arch:

Facts: Nodes send normalized data about itself to Puppet Master:

Catalogue: Puppet uses facts to compile a catalog that specifies how the node should be configured.

Report: Node reports back to puppet indicating the configuration is complete, which is visible in puppet dashboard.

----->Puppet Master and Slave communicates through a secure encrypted channel with the help of SSL.

----->Communication between master and slave:

Puppet Slave asks for Puppet Master certificate.
After receiving Puppet Master certificate, Master requests for Slave certificate.
Once Master has signed the Slave certificate, Slave requests for configuration/data.
Finally, Puppet Master will send the configuration to Puppet Slave

------------>Components of Puppet
Manifests: Every Slave has got its configuration details in Puppet Master, written in the native Puppet language. These details are written in the language which Puppet can understand and are termed as Manifests. They are composed of Puppet code and their filenames use the .pp extension. These are basically Puppet programs. 
For example: You can write a Manifest in Puppet Master that creates a file and installs Apache server on all Puppet Slaves connected to the Puppet Master.

Module: A Puppet Module is a collection of Manifests and data (such as facts, files, and templates), and they have a specific directory structure. Modules are useful for organizing your Puppet code, because they allow you to split your code into multiple Manifests. Modules are self-contained bundles of code and data.

Resource: Resources are the fundamental unit for modeling system configurations. Each Resource describes some aspect of a system, like a specific service or package.

Facter: Facter gathers basic information (facts) about Puppet Slave such as hardware details, network settings, OS type and version, IP addresses, MAC addresses, SSH keys, and more. These facts are then made available in Puppet Master’s Manifests as variables.

Mcollective: It is a framework that allows several jobs to be executed in parallel on multiple Slaves. It performs various functions like:

Interact with clusters of Slaves, whether in small groups or very large deployments.
Use a broadcast paradigm to distribute requests. All Slaves receive all requests at the same time, requests have filters attached, and only Slaves matching the filter will act on requests.
Use simple command-line tools to call remote Slaves.
Write custom reports about your infrastructure.
Catalogs: A Catalog describes the desired state of each managed resource on a Slave. It is a compilation of all the resources that the Puppet Master applies to a given Slave, as well as the relationships between those resources. Catalogs are compiled by a Puppet Master from Manifests and Slave-provided data (such as facts, certificates, and an environment if one is provided), as well as an optional external data (such as data from an external Slave classifier, exported resources, and functions). The Master then serves the compiled Catalog to the Slave when requested.

---->Puppet Resources and Classes:

Resources are the fundamental units for modelling system configurations.Each resource describes some aspect of system like a service or package.

basically, a user or a file is a resource.

syntax:

resource_type{ 'resource_name'
	attribute => value

        ....

  }

ex:

file { '/etc/inetd.conf':
   ensure => '/etc/inetd.conf',

}

------->Resources can be grouped to form classes which are larger units of configuration. While a resource may describe a single file or package, a class may describe everything needed to configure 

an entire servce or application.

class example_class {

-----
    code


}

------>Puppet Manifests:

Puppet programs are called manifests.Manifests are composed of puppet code and their file names use .pp extension 

syntax:

class {'Class_Name:}

class { 'apache': }
	apache::vhost { 'example.com':
	 port => '80',
	 docroot => '/var/www/html'
     }
  }

------>puppet agent -t is used to poll master server for changes. It has to be run on nodes.


---------->Puppet Modules:

A module is a collection of manifests and data(such as facts, files and templates) and they have a specific directory structure.Modules are used to organize your puppet code as they help to 

split your code into multiple manifests.


------------->Puppet Installation:





