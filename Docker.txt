------>Docker:

Its is a containerization technology that packages your application and all its dependencies together in the form of containers to ensure seamless working of your app in any environment

------>Containerization:

It means bringing virtualization to OS level. All containers will be using the same host OS unlike Virtual Machines which has guest OS running.

All binaries and libraries of containers will be on host OS.

**---->It consists of entire run-time environment, an application, all its dependencies, libraries, binaries and other config files needed to run bundled into one package.

----->Dynamic resource allocation of RAM in case of containers

----------->Docker Container:

It is an isolated application platform which contains every thing needed to run the application. They are built from one base docker image and dependencies are installed on the top of docker image as "image layers"


---------->Who can use Docker:

Docker is designed to benefit both developers and system Admins.

---->Developers can write code with out worrying about testing/production environemnt.

---->System Admins need not worry about infrastructure as docker can be easily scaled up/down the number of systems.


----------->How is docker used in DevOps:

Docker is heavily used in Continuous testing phase to create testing environment. It is also used in COntinuous Deployment to deploy the code in production.


----------->How does Docker work?

------>Docker Engine is the heart of Docker system. Docker works as a client-server program. 

------>Docker server consists of long running program called Docker daemon and the client is command line interface which is termed as Docker client.

------>Rest API which is a combination of socketIO and a tcp/IP connection servers a communication between CLI client and Docker server/daemon

------->In linux OS, there is a docker client which can be accessed via terminal and a docker host which rus docker daemon.

------>we build docker images by running docker commands through docker client to docker daemon.

---->In windows/Mac there is an additional thing called Docker tool box which is used to easily install this setup.



---------------->Docker Images:

They can be relatable to an executable file. Images are the building blocks of Docker conainers.These images are created by "build command".

These templates can be used to build docker container by using "Run" command.


----------------> Docker Registry:

Repository of Docker Images.

Repo can be local or public. Examples of public docker repo is Docker Hub.


---------------->Docker Architecture:

It consists of Docker client, Docker Host and a Registry:


Client consists of Docker CLI, which can run the commands build, pull and run


Docker daemon is reposnsible for docker images and docker conainers.If i have to build a docker image, i have to issue a build command using CLI to docker dameon. The Docker daemon will then build a image based 

on the inputs and save it to the docker registry.If, dont want to create an image, we can pull the image from docker Hub by using docker pull command.

Finally, if we want to have running instance of docker image, we will send docker run command to docker daemon.

This is the functionality of Docker.


----------------->Basic Docker Commands:

To pull a docker image from Docker Hub, we can use the command,

docker pull <image:tag> tag: specifies the version of the image


----->To run it, docker run <image:tag> or docker run -it <image name>

----->To get the list of all images in the system,     docker images 

----->To get list of all running containers,     docker ps

------->To list down all the containers even if they are not running: docker ps -a 

------>To delete the container, use below comand after stopping contaner: docker rm <container-id>

------>To delete an image we can use :   docker rmi <image id>

--------->To stop the container : docker stop <image id>

--------->To access a running container:  docker exec -it <container id> bash

---------->Command to stop a running container: docker stop <container id>

-------->command to kill the container by stopping its execution immediately:   docker kill <container id>

--------->command to login to the docker hub repository:  docker login

--------->This command is used to delete a stopped container :   docker rm <container-id>

--------->command is used to build an image from a specified docker file:  docker build <path to docker file>


------------------->Building Images:

Images are comprised of many layers.Each layer is an image of its own.

Each image has a base-layer which is read only.Changes made to image are saved as layer on top of Base Image layer.

Containers are generated by running the image layers which are stacked one above the other.

---->In order to build a docker image, we need to have a docker file.They contain instructions to build docker image.Docker file has many key words like FROm --- base image from which container is built.

      RUN : Command that needs to be executed on this image.

------>Docker file is used to install new applications.


---------------------->Docker COmpose:

In order to containerize multiple services, we use docker-compose. Basically used to run multi container applications. we put all of them in a config file called docker-compose.yaml.

sample file:

version: '2'

services:

  wordpress:
    image: wordpress
    links:
      - wordpress_db:mysql
    ports:
      - 8082:80

  wordpress_db:
    image: mariadb
    environment:
      MYSQL_ROOT_PASSWORD: edureka

  phpmyadmin:
    image: corbinu/docker-phpmyadmin
    links:
      - wordpress_db:mysql
    ports:
      - 8181:80
    environment:
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: edureka


----------->What Is Docker Swarm?.

Docker Swarm is a technique to create and maintain a cluster of Docker Engines. There is a docker manager who is the heart of docker swarm

The Docker engines can be hosted on different nodes, and these nodes which are in remote locations form a Cluster when connected in Swarm mode.

----->Features of Docker Swarm:

---->HA of services

Even though a node is down, the service running on the node/container is not hampered. Mnagaer will start that service on another nodes.

Rolling updates:

This feature is used if you want to update particular service running in a node.

Decentralized access
----->Auto load balancing:

If any node is down, load will be shifted to other running nodes.


easy to scale up deployments.

-------->Docker swarm commands:(should be run on manager>

----->Initialize the swarm:  docker swarm init --advertise-addr <ip addr>

wen you initialize the swarm, you get a token. this token is used at the node end to add it to the cluster.

------->List services: docker service ls

------->List task of services: docker service ps <name>

------->create new service:  docker service create <name> <image-name>

------->Remove Service: docker service rm <name>

------->Scale services: docker service scale <name> =5 


-------------> commands to run on node:

--------->List node: docker node ls

--------->List services in node: docker node ps

--------->Remove node: docker node rm <id>. If you are unable to remove the node, it may be connected to swarm. First leave the node from swarm by running:  docker swarm leave --force

--------->













































